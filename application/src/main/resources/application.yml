# server config
server:
  host: ${SERVER_HOST:localhost}
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${SERVER_CONTEXT:/}
  tomcat:
    remoteip:
      remote_ip_header: ${SERVER_TOMCAT_REMOTE_IP_HEADER:x-forwarded-for}
      protocol_header: ${SERVER_TOMCAT_PROTOCOL_HEADER:x-forwarded-proto}
  max-http-request-header-size: 32000
  error:
    include-stacktrace: never

# Spring configuration
spring:
  sql:
    init:
      schema-locations: classpath:db/schema-${spring.sql.init.platform}.sql
      mode: always
      platform: ${JDBC_PLATFORM:h2}
  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration
  batch:
    jdbc:
      initialize-schema: always
  jpa:
    generate-ddl: true
    hibernate:
      ddl-auto: update
    # database-platform: ${JDBC_DIALECT:org.hibernate.dialect.H2Dialect}
  datasource:
    driverClassName: ${JDBC_DRIVER:org.h2.Driver}
    password: ${JDBC_PASS:password}
    username: ${JDBC_USER:sa}
    url: ${JDBC_URL:jdbc:h2:file:./data/db}
  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: never
  h2:
    console:
      enabled: ${H2_CONSOLE:false}

# patch loader for quartz
spring.org.quartz.scheduler.classLoadHelper.class: org.quartz.simpl.ThreadContextClassLoadHelper
# fix driver for postgres
# NOTE: we do NOT support h2 with quartz this way..
#spring.quartz.properties.org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.PostgreSQLDelegate

# Management Endpoints
management:
  server:
    port: ${MANAGEMENT_PORT:8081}
  endpoints:
    access:
      default: none
    web:
      base-path:
      exposure.include: "health,info,metrics"
  endpoint:
    info:
      access: read-only
    health:
      access: read-only

# Runtimes
runtime:
  dbt:
    image: ${RUNTIME_DBT_IMAGE:ghcr.io/scc-digitalhub/digitalhub-sdk-wrapper-dbt/wrapper-dbt:latest}
  kfp:
    image: ${RUNTIME_KFP_IMAGE:ghcr.io/scc-digitalhub/digitalhub-sdk-wrapper-kfp/wrapper-kfp:latest}
    duration: ${RUNTIME_KFP_DURATION:${jwt.refresh-token.duration}}
  hera:
    image: ${RUNTIME_HERA_IMAGE:ghcr.io/scc-digitalhub/digitalhub-sdk-wrapper-hera/wrapper-hera:latest}
    duration: ${RUNTIME_HERA_DURATION:${jwt.refresh-token.duration}}
  python:
    images:
      PYTHON3_9: ${RUNTIME_PYTHON_IMAGE_3_9:ghcr.io/scc-digitalhub/digitalhub-serverless/python-runtime:3.9-latest}
      PYTHON3_10: ${RUNTIME_PYTHON_IMAGE_3_10:ghcr.io/scc-digitalhub/digitalhub-serverless/python-runtime:3.10-latest}
      PYTHON3_11: ${RUNTIME_PYTHON_IMAGE_3_11:ghcr.io/scc-digitalhub/digitalhub-serverless/python-runtime:3.11-latest}
      PYTHON3_12: ${RUNTIME_PYTHON_IMAGE_3_12:ghcr.io/scc-digitalhub/digitalhub-serverless/python-runtime:3.12-latest}
    user-id: ${RUNTIME_PYTHON_USER_ID:${kubernetes.security.user}}
    group-id: ${RUNTIME_PYTHON_GROUP_ID:${kubernetes.security.group}}
    command: /usr/local/bin/processor
  sklearnserve:
    image: ${RUNTIME_SKLEARN_SERVE_IMAGE:seldonio/mlserver:1.6.0-sklearn}
    user-id: ${RUNTIME_SKLEARN_SERVE_USER_ID:${kubernetes.security.user}}
    group-id: ${RUNTIME_SKLEARN_SERVE_GROUP_ID:${kubernetes.security.group}}
  mlflowserve:
    image: ${RUNTIME_MLFLOW_SERVE_IMAGE:seldonio/mlserver:1.6.0-mlflow}
    user-id: ${RUNTIME_MLFLOW_SERVE_USER_ID:${kubernetes.security.user}}
    group-id: ${RUNTIME_MLFLOW_SERVE_GROUP_ID:${kubernetes.security.group}}
  huggingfaceserve:
    image: ${RUNTIME_HUGGINGFACE_SERVE_IMAGE:kserve/huggingfaceserver:latest}
    user-id: ${RUNTIME_HUGGINGFACE_USER_ID:${kubernetes.security.user}}
    group-id: ${RUNTIME_HUGGINGFACE_GROUP_ID:${kubernetes.security.group}}
  kubeai:
    endpoint: ${RUNTIME_KUBEAI_ENDPOINT:}
  flower:
    images:
      server: ${RUNTIME_FLOWER_SERVER:flwr/superlink:1.20.0-py3.12-ubuntu24.04}
      client: ${RUNTIME_FLOWER_CLIENT:flwr/supernode:1.20.0-py3.12-ubuntu24.04}
      runner: ${RUNTIME_FLOWER_RUNNER:flwr/clientapp:1.20.0-py3.12-ubuntu24.04}
    user-id: ${RUNTIME_FLOWER_USER_ID:}
    group-id: ${RUNTIME_FLOWER_GROUP_ID:}
    tls-ca-cert: ${RUNTIME_FLOWER_TLS_CA_CERT:}
    tls-ca-key: ${RUNTIME_FLOWER_TLS_CA_KEY:}
    tls-conf: ${RUNTIME_FLOWER_TLS_CONF:classpath:/runtime-flower/docker/certificate.conf}
    tls-int-domain: ${RUNTIME_FLOWER_TLS_INT_DOMAIN:${kubernetes.namespace}}
    tls-ext-domain: ${RUNTIME_FLOWER_TLS_EXT_DOMAIN:}

# Spring Docs
springdoc:
  api-docs:
    path: /v1/api-docs


# registry
registry:
  name: ${IMAGE_REGISTRY:}
  secret: ${IMAGE_REGISTRY_SECRET:}    

# build config
builder:
  framework: ${BUILDER_FRAMEWORK:kaniko}
  image-prefix: ${BUILDER_IMAGE_PREFIX:dhcore}
  kaniko:
    image: ${KANIKO_IMAGE:gcr.io/kaniko-project/executor:latest}
    image-prefix: ${KANIKO_IMAGE_PREFIX:${builder.image-prefix}}
    image-registry: ${KANIKO_IMAGE_REGISTRY:${registry.name}}
    secret: ${KANIKO_SECRET:${registry.secret}}
    args: ${KANIKO_ARGS:}
  buildkit:
    image: ${BUILDKIT_IMAGE:moby/buildkit:master-rootless}
    image-prefix: ${BUILDKIT_IMAGE_PREFIX:${builder.image-prefix}}
    image-registry: ${BUILDKIT_IMAGE_REGISTRY:${registry.name}}
    secret: ${BUILDKIT_SECRET:${registry.secret}}
    command: ${BUILDKIT_COMMAND:buildctl-daemonless.sh}
    args: ${BUILDKIT_ARGS:build,--frontend,dockerfile.v0}
    client-secret: 
      name: ${BUILDKIT_CLIENT_SECRET_NAME:}
      mount-path: ${BUILDKIT_CLIENT_SECRET_MOUNT_PATH:/certs/client}



# MLRun config
mlrun:
  base-image: ${MLRUN_BASE_IMAGE:mlrun/mlrun}
  image-prefix: ${MLRUN_IMAGE_PREFIX:dhcore}
  image-registry: ${MLRUN_IMAGE_REGISTRY:}



argoworkflows:
  artifacts:
    configmap: ${ARGOWORKFLOWS_ARTIFACTS_CONFIGMAP:}
    key: ${ARGOWORKFLOWS_ARTIFACTS_KEY:}
  serviceaccount: ${ARGOWORKFLOWS_SERVICE_ACCOUNT:default}
  user: ${ARGOWORKFLOWS_USER:1000}

# Kubernetes
kubernetes:
  namespace: ${K8S_NAMESPACE:default}
  logs:
    enable: ${K8S_ENABLE_LOGS:true}
    max-length: ${K8S_LOGS_MAX_LENGTH:1048576}
  metrics: ${K8S_ENABLE_METRICS:true}
  # supported values for results: default,keep,disable
  results: ${K8S_ENABLE_RESULTS:default}
  security:
    disable-root: ${K8S_SEC_DISABLE_ROOT:false}
    seccomp-profile: ${K8S_SEC_SECCOMP_PROFILE:RuntimeDefault}
    user: ${K8S_SEC_USER:}
    group: ${K8S_SEC_GROUP:}
  image-pull-policy: ${K8S_IMAGE_PULL_POLICY:IfNotPresent}
  registry-secret: ${K8S_REGISTRY_SECRET:${registry.secret}}  
  init:
    image: ${K8S_INIT_IMAGE:ghcr.io/scc-digitalhub/digitalhub-core-builder-tool:latest}
    command: "/bin/bash,-c,/app/builder-tool.sh"
  shared-volume:
    volume_type: empty_dir
    name: shared-dir
    mount_path: /shared
    spec:
      sizeLimit: 100Mi
  empty-dir:
    size: ${K8S_EMPTY_DIR_SIZE:128Mi}
    medium: ${K8S_EMPTY_DIR_MEDIUM:}
  service:
    type: ${K8S_SERVICE_TYPE:NodePort}
  resources:
    cpu:
      requests: ${K8S_RESOURCE_CPU_DEFAULT:100m}
      limits: ${K8S_RESOURCE_CPU_LIMIT:}
    mem:
      requests: ${K8S_RESOURCE_MEM_DEFAULT:256Mi}
      limits: ${K8S_RESOURCE_MEM_LIMIT:}
      toleration: ${K8S_RESOURCE_MEM_TOLERATION:1.1}
    gpu:
      key: ${K8S_RESOURCE_GPU_KEY:nvidia.com/gpu}
    pvc:
      requests: ${K8S_RESOURCE_PVC_DEFAULT:2Gi}
      limits: ${K8S_RESOURCE_PVC_LIMIT:}
      storage-class: ${K8S_RESOURCE_PVC_STORAGE_CLASS:}
    ephemeral:
      requests: ${K8S_RESOURCE_EPHEMERAL_DEFAULT:2Gi}
      limits: ${K8S_RESOURCE_EPHEMERAL_LIMIT:}
      storage-class: ${K8S_RESOURCE_EPHEMERAL_STORAGE_CLASS:}    
    workflow:
      storage-class: ${K8S_RESOURCE_WORKFLOW_STORAGE_CLASS:}  
      access-mode: ${K8S_RESOURCE_WORKFLOW_ACCESS_MODE:ReadWriteMany}
  config:
    config-map: ${DH_CONFIG_COMMON_MAPS:}
    secret: ${DH_CONFIG_COMMON_SECRETS:}
  templates: ${K8S_TEMPLATES:}
  jobs:
    activeDeadlineSeconds: ${K8S_JOB_DEADLINE:259200}
    suspend: ${K8S_JOB_SUSPEND:false}
  crds:
    api-groups: ${K8S_CUSTOM_API_GROUPS:kubeai.org/v1}

# Application endpoint
application:
  endpoint: ${DH_ENDPOINT:http://localhost:8080}
  name: ${DH_NAME:@project.name@}
  contacts-email: ${DH_CONTACTS_EMAIL:}
  contacts-name: ${DH_CONTACTS_NAME:@project.name@}
  contacts-link: ${DH_CONTACTS_LINK:https://github.com/scc-digitalhub/digitalhub-core}
  description: "@project.description@"
  version: "@project.version@"
  level: ${DH_API_LEVEL:}
  api: v1
  profiles: ${spring.profiles.active:default}

logging:
  level:
    ROOT: INFO
    it.smartcommunitylabdhub: ${LOG_LEVEL:INFO}
    it.smartcommunitylabdhub.framework.k8s: ${LOG_LEVEL_K8S:INFO}

security:
  api:
    cors:
      origins: ${DH_CORS_ORIGINS:}
  basic:
    username: ${DH_AUTH_BASIC_USER:admin}
    password: ${DH_AUTH_BASIC_PASSWORD:}
  jwt:
    issuer-uri: ${DH_AUTH_JWT_ISSUER_URI:${security.oidc.issuer-uri}}
    audience: ${DH_AUTH_JWT_AUDIENCE:${security.oidc.client-id}}
    claim: ${DH_AUTH_JWT_CLAIM:roles}
    username: ${DH_AUTH_JWT_USERNAME:preferred_username}
  oidc:
    issuer-uri: ${DH_AUTH_OIDC_ISSUER_URI:}
    client-name: ${DH_AUTH_OIDC_CLIENT_NAME:${application.name}}
    client-id: ${DH_AUTH_OIDC_CLIENT_ID:}
    client-secret: ${DH_AUTH_OIDC_CLIENT_SECRET:}
    claim: ${DH_AUTH_OIDC_CLAIM:${security.jwt.claim}}
    username-attribute-name: ${DH_AUTH_OIDC_USERNAME:preferred_username}
    scope: ${DH_AUTH_OIDC_SCOPE:openid,email,profile}

# Conditional Configuration Cloud
event-queue:
  enabled: ${ENABLE_EVENTS:false}
  services:
    rabbit:
      connection:
        host: ${RABBITMQ_HOST:}
        port: ${RABBITMQ_PORT:}
        username: ${RABBITMQ_USER:}
        password: ${RABBITMQ_PASSWORD:}
        virtual-host: ${RABBITMQ_VHOST:/}
      queue-name: ${RABBITMQ_QUEUE:}
      entity-topic: ${RABBITMQ_TOPIC:entityTopic}
      entity-routing-key: ${RABBITMQ_ROUTING_KEY:entityRoutingKey}
      enabled: ${RABBITMQ_ENABLE:false}

# Managing monitors delay and other information
monitors:
  min-delay: 10
  delay: ${MONITORS_DELAY:10}

# Solr configuration
solr:
  url: ${SOLR_URL:false}
  user: ${SOLR_USER:}
  password: ${SOLR_PASSWORD:}
  admin-user: ${SOLR_ADMIN_USER:${SOLR_USER}}
  admin-password: ${SOLR_ADMIN_PASSWORD:${SOLR_PASSWORD}}
  collection: ${SOLR_COLLECTION:dhcore}
  timeout: ${SOLR_TIMEOUT:5000}
  shards: ${SOLR_COLLECTION_SHARDS_NUM:1}
  replicas: ${SOLR_COLLECTION_REPLICATION:1}
  reindex: ${SOLR_REINDEX:never}

lucene:
  index-path: ${LUCENE_INDEX_PATH:./data/index}
  reindex: ${LUCENE_REINDEX:never}

# files support
files:
  max-column-size: ${FILES_MAX_COLUMN_SIZE:2097152}
  default:
    store: ${FILES_DEFAULT_STORE:s3://${application.name}}

# JWT configuration
jwt:
  keystore:
    path: ${JWT_KEYSTORE_PATH:classpath:/keystore.jwks}
    kid: ${JWT_KEYSTORE_KID:}
  access-token:
    duration: ${JWT_ACCESS_TOKEN_DURATION:}
  refresh-token:
    duration: ${JWT_REFRESH_TOKEN_DURATION:}
  client-id: ${JWT_CLIENT_ID:${security.basic.username}}
  client-secret: ${JWT_CLIENT_SECRET:${security.basic.password}}
  redirect-uris: ${JWT_REDIRECT_URIS:http://localhost:*,${application.endpoint}/console/auth-callback}
  cache-control: ${JWKS_CACHE_CONTROL:public, max-age=900, must-revalidate, no-transform}

# Credentials
credentials:
  provider:
    s3:
      enable: ${S3_CREDENTIALS_PROVIDER:false}
      endpoint: ${S3_ENDPOINT_URL:}
      bucket: ${S3_BUCKET:}
      signature-version: s3v4
      region: ${AWS_DEFAULT_REGION:}
      access-key: ${AWS_ACCESS_KEY:}
      secret-key: ${AWS_SECRET_KEY:}
      path-style-access: ${S3_PATH_STYLE_ACCESS:}
    db:
      enable: ${DB_CREDENTIALS_PROVIDER:false}
      platform: ${DB_CREDENTIALS_PLATFORM:postgresql}
      host: ${DB_CREDENTIALS_HOST:}
      port: ${DB_CREDENTIALS_PORT:}
      database: ${DB_CREDENTIALS_DATABASE:}
      endpoint: ${DB_CREDENTIALS_ENDPOINT:}
      claim: ${DB_CREDENTIALS_CLAIM:db/role}
      role: ${DB_CREDENTIALS_ROLE:}
      user: ${DB_CREDENTIALS_USER:}
      password: ${DB_CREDENTIALS_PASSWORD:}
    minio:
      enable: ${MINIO_CREDENTIALS_PROVIDER:false}
      endpoint: ${MINIO_CREDENTIALS_ENDPOINT:}
      region: ${MINIO_CREDENTIALS_REGION:us-east-1}
      bucket: ${MINIO_CREDENTIALS_BUCKET:}
      claim: ${MINIO_CREDENTIALS_CLAIM_PREFIX:minio}
      policy: ${MINIO_CREDENTIALS_POLICY:{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["s3:*"],"Resource":["arn:aws:s3:::*"]}]}}
      roleArn: ${MINIO_CREDENTIALS_ROLE_ARN:}
      access-key: ${MINIO_CREDENTIALS_ACCESS_KEY:}
      secret-key: ${MINIO_CREDENTIALS_SECRET_KEY:}

# Templates
templates:
  path: ${TEMPLATES_PATH:classpath:/templates}

# Triggers
triggers:
  lifecycle:
    store: jdbc
